package com.crossover.techtrial.controller;

import com.crossover.techtrial.dto.DailyElectricity;
import com.crossover.techtrial.exceptions.GlobalExceptionHandler;
import com.crossover.techtrial.model.HourlyElectricity;
import com.crossover.techtrial.model.Panel;
import com.crossover.techtrial.service.HourlyElectricityService;
import com.crossover.techtrial.service.PanelService;
import java.util.ArrayList;
import java.util.List;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.data.web.PageableDefault;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RestController;

/**
 * Panel Controller for all Rest APIs related to Panel.
 * 
 * @author Crossover
 *
 */

@RestController
public class PanelController {

	@Autowired
	PanelService panelService;

	@Autowired
	HourlyElectricityService hourlyElectricityService;

	/**
	 * Register a Panel to System and start receiving the electricity
	 * statistics.
	 * 
	 * @param panel
	 *            to register.
	 * @return
	 */
	@PostMapping(path = "/api/register")
	public ResponseEntity<?> registerPanel(@RequestBody Panel panel) {
		ResponseEntity<?> responseEntity;
		// Validate serial number.
		if (panel != null && panel.getSerial().length() == 16) {
			panelService.register(panel);
			responseEntity = ResponseEntity.accepted().build();
		} else {
			responseEntity = new GlobalExceptionHandler()
					.handle(new Exception("Serial number must be 16 characters length"));
		}
		return responseEntity;
	}

	/**
	 * Controller Method to save hourly Electricity to Database.
	 * 
	 * @param panelSerial
	 *            Serial number of Panel.
	 * @param hourlyElectricity
	 *            generated electricity for this panel.
	 * @return
	 */

	@PostMapping(path = "/api/panels/{panel-serial}/hourly")
	public ResponseEntity<?> saveHourlyElectricity(@PathVariable(value = "panel-serial") String panelSerial,
			@RequestBody HourlyElectricity hourlyElectricity) {
		// Find panel by serial
		Panel panel = panelService.findBySerial(panelSerial);
		hourlyElectricity.setPanel(panel);
		// Save the panel
		HourlyElectricity res = hourlyElectricityService.save(hourlyElectricity);
		return ResponseEntity.ok(res);
	}

	/**
	 * Get Hourly Electricity from Previous dates.
	 */

	@GetMapping(path = "/api/panels/{panel-serial}/hourly-history")
	public ResponseEntity<?> hourlyElectricity(@PathVariable(value = "panel-serial") String panelSerial,
			@PageableDefault(size = 5, value = 0) Pageable pageable) {
		Panel panel = panelService.findBySerial(panelSerial);
		if (panel == null) {
			return ResponseEntity.notFound().build();
		}
		Page<HourlyElectricity> page = hourlyElectricityService.getAllHourlyElectricityByPanelId(panel.getId(),
				pageable);
		return ResponseEntity.ok(page);
	}

	/**
	 * This end point is used by Front end charts component to plot the daily
	 * statistics of electricity generated by this Panel from the day it
	 * registered to end of previous day.
	 * 
	 * @param panelSerial
	 *            is unique serial for this Panel.
	 * @return
	 */

	@GetMapping(path = "/api/panels/{panel-serial}/daily")
	public ResponseEntity<List<DailyElectricity>> allDailyElectricityFromYesterday(
			@PathVariable(value = "panel-serial") String panelSerial) {
		List<DailyElectricity> dailyElectricityForPanel = new ArrayList<>();
		/**
		 * IMPLEMENT THE LOGIC HERE and FEEL FREE TO MODIFY OR ADD CODE TO
		 * RELATED CLASSES. MAKE SURE NOT TO CHANGE THE SIGNATURE OF ANY END
		 * POINT. NO PAGINATION IS NEEDED HERE.
		 */
		// Retrieve all panels from yesterday and get the min, max ,avg and sum.
		List<Panel> panels = panelService.findAll();
		for (Panel panel : panels) {
			DailyElectricity daily = new DailyElectricity();
			List<HourlyElectricity> hours = hourlyElectricityService.getAllHourlyElectricityByPanelId(panel.getId());
			Long sum = 0L;
			Long num = 0L;
			Long min = 0L;
			Long max = 0L;
			for (HourlyElectricity hour : hours) {
				// Set the date once.
				if (daily.getDate() != null) {
					daily.setDate(hour.getReadingAt().toLocalDate());
				}
				// Check null value and set it to 0 if null.
				Long value = (hour.getGeneratedElectricity()!= null)?hour.getGeneratedElectricity():0L;
				// Get the maximum.
				if (value > max) {
					max = value;
				}
				// Get the minimum.
				if (value < min) {
					min = value;
				}
				// Sum it up
				sum += value;
				num++;
			}
			// Find the average and set the values.
			Double avg = sum.doubleValue() / num.doubleValue();
			daily.setAverage(avg);
			daily.setSum(sum);
			daily.setMax(max);
			daily.setMin(min);
			dailyElectricityForPanel.add(daily);
		}
		return ResponseEntity.ok(dailyElectricityForPanel);
	}
}